协议约定：
公共部分：
 int  4字节      frameLength       有效帧长度(不包含自身)
 long 8字节      checkSum          消息的内容的校验和(不包含第一个字段和自身)
 byte 1字节      pkgType           协议的类型(每种协议一个固定值)

1. 请求建立连接(或重连)
 ?     ?        userInfo          玩家账户信息 -  与网关建立连接时还没有角色数据，且建立的会话要支持切换角色
 int   4字节     verifyingTimes    这是客户端第几次发起连接请求：用于识别最新请求和客户端追踪结果
 long  8字节     ack               客户端期望的下一个消息号(捎带确认的ack)
 bytes 字节数组   token             玩家与网关建立连接需要验证的数据(可以使用加密运算，也可以使用redis存储进行比较)

2. 建立连接应答
 byte  1字节     success           是否允许建立连接
 int   4字节     verifyingTimes    这是客户端第几次发起的连接请求
 long  8字节     ack               服务器期望的下一个消息号

3. 心跳协议 - ping/pong（请注意：这是网络层心跳，网络层心跳不能代替逻辑层心跳）
 long  8字节      sequence         这是我发送的第几个包/帧。
 long  8字节      ack              我期望的下一个消息号(捎带确认的ack)

4. 单向消息包（正式消息）
 long  8字节     sequence         这是我发送的第几个包/帧。
 long  8字节     ack              我期望的下一个消息号(捎带确认的ack)
 bytes 字节数组   bytes            消息的内容(msgId + protoBytes)

1. 使用消息确认机制是为了实现防闪断、无感断线重连。
2. 玩家先从登录服获得要登录的角色信息，然后再连接网关服。
