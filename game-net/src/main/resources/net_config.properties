#
# Copyright 2019 wjybxx
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# 由于使用的通用的ConfigLoader进行加载，因此可以使用本地文件覆盖jar包中的配置，注意查看日志中打印的文件路径

# 内网ip作为备选项，当发现自动查找不成功时，可以用配置替代
# localIp=192.168.x.x
# 外网ip
# outerIp=192.168.x.x

# 默认用于token异或加密的秘钥(随便弄的一段)(如果自定义加解密方式，则不一定适用该字段)
tokenKey=SIhc3NpZ25lZU5hbWUiOiIiLCJhc3NpZ25lZUVtYWlsIjoiIiwibGljZ

# NetEventLoop帧间隔(毫秒) 帧间隔越小，竞争越大，性能可能越差(不能很好的利用缓冲区)！帧间隔越大，延迟肯定越大，但竞争肯定小。
# 服务器与服务器之间最差情况需要等待4个帧间隔，而与玩家之间最差情况需要等待2个帧间隔。
# 该值不能太大，当然也不能太小。对于实时性较强的游戏，建议该值在20-40，超过40的话体验会较差。
frameInterval=20

# 每一个NetEventLoop的netty IO线程数(workerGroup)
maxIOThreadNumPerEventLoop=2

# 最大帧大小
maxFrameLength=8192
# 作为server角色时socket发送缓冲区大小
sndBufferAsServer=8192
# 作为server角色时socket接收缓冲区大小
revBufferAsServer=8192
# 作为client角色时socket发送缓冲区大小
sndBufferAsClient=8192
# 作为client角色时socket接收缓冲区大小
revBufferAsClient=8192

# 登录请求的token超时时间(秒)，登录用的token是有时效性的，必须小于等于会话超时时间 sessionTimeout
loginTokenTimeout=60
# 请求建立连接阶段最大尝试次数
connectMaxTryTimes=5
# 等待连接建立的超时时长(毫秒)
connectTimeout=5000
# 等待服务器的token验证结果超时时长(毫秒)
waitTokenResultTimeout=10000
# 消息包超时时长(毫秒)(即一个包5S内得不到服务器确认，则发起重连请求，它决定什么时候发起重连，因此应该稍微大一点)
ackTimeout=5000
# 会话超时时间(秒)，当连接的接收方在指定时间内未收到连接的发起方的任何消息时，该session会被删除
sessionTimeout=60
# token禁用超时时间(秒)
# 适当长一点，也不能太长(当同时存在多个有效token时，其中一个连接成功，可以禁用掉其它token中的一部分)
tokenForbiddenTimeout=600


# 服务器(连接的接收方)为每个客户端缓存的消息数上限(未发送的+未确认的)
serverMaxCacheNum=500
# 客户端(连接的发起方)缓存的消息数上限(未发送的+未确认的)
clientMaxCacheNum=500

# 清空发送缓存区的阈值(消息数)(当待发送的消息数到达该值时，立即发送，而不等待到下一帧)(同步RPC调用和返回都不会进入缓冲区)
# 该值等于0表示关闭缓冲区，异步消息也立即发送
flushThreshold=50
# 清空接收缓冲区的阈值(消息数)(当已接收的消息数达到该值时，立即提交给应用层，而不是等待到下一帧)(同步RPC调用和返回都不会进入缓冲区)
# 该值等于0表示关闭缓冲区，异步请求也立即提交
commitThreshold=50

# http 请求超时时间(秒)，0表示不超时，建议大于0，默认15(这个值不具有什么参考价值)
httpRequestTimeout=15
# http session超时时间,默认15S。不要太大。 --- 为何在这一版加长时间了？因为变成异步了，另一个EventLoop什么时候处理完不确定
# 此外，它也是检查session是否超时的间隔
httpSessionTimeout=15

# rpc异步回调超时时间(毫秒) 默认15s
rpcCallbackTimeoutMs=15000
# rpc同步调用超时时间(毫秒) 默认5s
syncRpcTimeoutMs=5000

# DefaultRpcBuilder是否使用pipeline模式进行消息发送
DefaultRpcBuilder.POLICY.PIPELINE=false